//面试题32：从上到下打印二叉树（层序遍历）
//题目1：不分行从上到下打印二叉树
void PrintFromTopToBottom(BinaryTreeNode* pTreeRoot)
{
  if(pTreeRoot==nullptr)
    return;
  std::deque<BinaryTreeNode*> dequeTreeNode;
  dequeTreeNode.push_back(pTreeRoot);
  while(dequeTreeNode.size()){
    BinaryTreeNode* pNode=dequeTreeNode.front();
    dequeTreeNode.pop_front();
    printf("%d",pNode->m_nValue);
    if(pNode->m_pLeft)
      dequeTreeNode.push_back(pNode->m_pLeft);
    if(pNode->m_pRight)
      dequeTreeNode.push_back(pNode->m_pRight);
  } 
}

//题目2：分行从上到下打印二叉树
void Print(BinaryTreeNode* pRoot)
{
  if(pRoot==nullptr)
    return;
  std::queue<BinaryTreeNode*> nodes;
  nodes.push(pRoot);
  int nextLevel=0;
  int toBePrinted=1;
  while(!nodes.empty()){
    BinaryTreeNodes* pNode=nodes.front();
    printf("%d",pNodes->m_nValue);
    
    if(pNodes->m_pLeft!=nullptr){
      nodes.push(pNode->m_pLeft);
      ++nextLevel;
    }
    if(pNodes->m_pRight!=nullptr){
      nodes.push(pNode->m_nRight);
      ++nextLevel;
    }
    nodes.pop();
    --toBePrinted;
    if(toBePrinted==0){
      printf("\n");
      toBePrinted=nextLevel;
      nextLevel=0;
    } 
  }
}


